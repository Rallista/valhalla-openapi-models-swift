//
// Meili.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct Meili: Codable, JSONEncodable, Hashable {
    public var auto: MeiliAuto?
    public var bicycle: MeiliBicycle?
    public var customizable: [String]?
    public var _default: MeiliDefault?
    public var grid: MeiliGrid?
    public var logging: Logging?
    public var mode: String? = "auto"
    public var multimodal: MeiliMultimodal?
    public var pedestrian: MeiliPedestrian?
    public var service: MeiliService?
    public var verbose: Bool? = false

    public init(auto: MeiliAuto? = nil, bicycle: MeiliBicycle? = nil, customizable: [String]? = nil, _default: MeiliDefault? = nil, grid: MeiliGrid? = nil, logging: Logging? = nil, mode: String? = "auto", multimodal: MeiliMultimodal? = nil, pedestrian: MeiliPedestrian? = nil, service: MeiliService? = nil, verbose: Bool? = false) {
        self.auto = auto
        self.bicycle = bicycle
        self.customizable = customizable
        self._default = _default
        self.grid = grid
        self.logging = logging
        self.mode = mode
        self.multimodal = multimodal
        self.pedestrian = pedestrian
        self.service = service
        self.verbose = verbose
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case auto
        case bicycle
        case customizable
        case _default = "default"
        case grid
        case logging
        case mode
        case multimodal
        case pedestrian
        case service
        case verbose
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(auto, forKey: .auto)
        try container.encodeIfPresent(bicycle, forKey: .bicycle)
        try container.encodeIfPresent(customizable, forKey: .customizable)
        try container.encodeIfPresent(_default, forKey: ._default)
        try container.encodeIfPresent(grid, forKey: .grid)
        try container.encodeIfPresent(logging, forKey: .logging)
        try container.encodeIfPresent(mode, forKey: .mode)
        try container.encodeIfPresent(multimodal, forKey: .multimodal)
        try container.encodeIfPresent(pedestrian, forKey: .pedestrian)
        try container.encodeIfPresent(service, forKey: .service)
        try container.encodeIfPresent(verbose, forKey: .verbose)
    }
}
