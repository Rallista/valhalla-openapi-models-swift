//
// ValhallaConfig.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct ValhallaConfig: Codable, JSONEncodable, Hashable {
    public var additionalData: AdditionalData?
    public var httpd: Httpd?
    public var loki: Loki?
    public var meili: Meili?
    public var mjolnir: Mjolnir?
    public var odin: Odin?
    public var serviceLimits: ServiceLimits?
    public var statsd: Statsd?
    public var thor: Thor?

    public init(additionalData: AdditionalData? = nil, httpd: Httpd? = nil, loki: Loki? = nil, meili: Meili? = nil, mjolnir: Mjolnir? = nil, odin: Odin? = nil, serviceLimits: ServiceLimits? = nil, statsd: Statsd? = nil, thor: Thor? = nil) {
        self.additionalData = additionalData
        self.httpd = httpd
        self.loki = loki
        self.meili = meili
        self.mjolnir = mjolnir
        self.odin = odin
        self.serviceLimits = serviceLimits
        self.statsd = statsd
        self.thor = thor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case additionalData = "additional_data"
        case httpd
        case loki
        case meili
        case mjolnir
        case odin
        case serviceLimits = "service_limits"
        case statsd
        case thor
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(additionalData, forKey: .additionalData)
        try container.encodeIfPresent(httpd, forKey: .httpd)
        try container.encodeIfPresent(loki, forKey: .loki)
        try container.encodeIfPresent(meili, forKey: .meili)
        try container.encodeIfPresent(mjolnir, forKey: .mjolnir)
        try container.encodeIfPresent(odin, forKey: .odin)
        try container.encodeIfPresent(serviceLimits, forKey: .serviceLimits)
        try container.encodeIfPresent(statsd, forKey: .statsd)
        try container.encodeIfPresent(thor, forKey: .thor)
    }
}
