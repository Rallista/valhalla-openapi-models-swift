//
// MjolnirDataProcessing.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct MjolnirDataProcessing: Codable, JSONEncodable, Hashable {
    public var allowAltName: Bool? = false
    public var applyCountryOverrides: Bool? = true
    public var inferInternalIntersections: Bool? = true
    public var inferTurnChannels: Bool? = true
    public var scanTar: Bool? = false
    public var useAdminDb: Bool? = true
    public var useDirectionOnWays: Bool? = false
    public var useRestArea: Bool? = false
    public var useUrbanTag: Bool? = false

    public init(allowAltName: Bool? = false, applyCountryOverrides: Bool? = true, inferInternalIntersections: Bool? = true, inferTurnChannels: Bool? = true, scanTar: Bool? = false, useAdminDb: Bool? = true, useDirectionOnWays: Bool? = false, useRestArea: Bool? = false, useUrbanTag: Bool? = false) {
        self.allowAltName = allowAltName
        self.applyCountryOverrides = applyCountryOverrides
        self.inferInternalIntersections = inferInternalIntersections
        self.inferTurnChannels = inferTurnChannels
        self.scanTar = scanTar
        self.useAdminDb = useAdminDb
        self.useDirectionOnWays = useDirectionOnWays
        self.useRestArea = useRestArea
        self.useUrbanTag = useUrbanTag
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case allowAltName = "allow_alt_name"
        case applyCountryOverrides = "apply_country_overrides"
        case inferInternalIntersections = "infer_internal_intersections"
        case inferTurnChannels = "infer_turn_channels"
        case scanTar = "scan_tar"
        case useAdminDb = "use_admin_db"
        case useDirectionOnWays = "use_direction_on_ways"
        case useRestArea = "use_rest_area"
        case useUrbanTag = "use_urban_tag"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(allowAltName, forKey: .allowAltName)
        try container.encodeIfPresent(applyCountryOverrides, forKey: .applyCountryOverrides)
        try container.encodeIfPresent(inferInternalIntersections, forKey: .inferInternalIntersections)
        try container.encodeIfPresent(inferTurnChannels, forKey: .inferTurnChannels)
        try container.encodeIfPresent(scanTar, forKey: .scanTar)
        try container.encodeIfPresent(useAdminDb, forKey: .useAdminDb)
        try container.encodeIfPresent(useDirectionOnWays, forKey: .useDirectionOnWays)
        try container.encodeIfPresent(useRestArea, forKey: .useRestArea)
        try container.encodeIfPresent(useUrbanTag, forKey: .useUrbanTag)
    }
}
