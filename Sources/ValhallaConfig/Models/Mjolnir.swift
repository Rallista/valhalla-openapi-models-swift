//
// Mjolnir.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct Mjolnir: Codable, JSONEncodable, Hashable {
    public var admin: String? = "/custom_data/admins.sqlite"
    public var dataProcessing: MjolnirDataProcessing?
    public var globalSynchronizedCache: Bool? = false
    public var hierarchy: Bool? = true
    public var idTableSize: Int? = 1_300_000_000
    public var importBikeShareStations: Bool? = false
    public var includeBicycle: Bool? = true
    public var includeConstruction: Bool? = false
    public var includeDriveways: Bool? = true
    public var includeDriving: Bool? = true
    public var includePedestrian: Bool? = true
    public var logging: Logging?
    public var lruMemCacheHardControl: Bool? = false
    public var maxCacheSize: Int? = 1_000_000_000
    public var maxConcurrentReaderUsers: Int? = 1
    public var reclassifyLinks: Bool? = true
    public var shortcuts: Bool? = true
    public var tileDir: String? = ""
    public var tileExtract: String? = ""
    public var timezone: String? = "timezones.sqlite"
    public var trafficExtract: String? = ""
    public var transitDir: String? = ""
    public var transitFeedsDir: String? = ""
    public var useLruMemCache: Bool? = false
    public var useSimpleMemCache: Bool? = false

    public init(admin: String? = "/custom_data/admins.sqlite", dataProcessing: MjolnirDataProcessing? = nil, globalSynchronizedCache: Bool? = false, hierarchy: Bool? = true, idTableSize: Int? = 1_300_000_000, importBikeShareStations: Bool? = false, includeBicycle: Bool? = true, includeConstruction: Bool? = false, includeDriveways: Bool? = true, includeDriving: Bool? = true, includePedestrian: Bool? = true, logging: Logging? = nil, lruMemCacheHardControl: Bool? = false, maxCacheSize: Int? = 1_000_000_000, maxConcurrentReaderUsers: Int? = 1, reclassifyLinks: Bool? = true, shortcuts: Bool? = true, tileDir: String? = "", tileExtract: String? = "", timezone: String? = "timezones.sqlite", trafficExtract: String? = "", transitDir: String? = "", transitFeedsDir: String? = "", useLruMemCache: Bool? = false, useSimpleMemCache: Bool? = false) {
        self.admin = admin
        self.dataProcessing = dataProcessing
        self.globalSynchronizedCache = globalSynchronizedCache
        self.hierarchy = hierarchy
        self.idTableSize = idTableSize
        self.importBikeShareStations = importBikeShareStations
        self.includeBicycle = includeBicycle
        self.includeConstruction = includeConstruction
        self.includeDriveways = includeDriveways
        self.includeDriving = includeDriving
        self.includePedestrian = includePedestrian
        self.logging = logging
        self.lruMemCacheHardControl = lruMemCacheHardControl
        self.maxCacheSize = maxCacheSize
        self.maxConcurrentReaderUsers = maxConcurrentReaderUsers
        self.reclassifyLinks = reclassifyLinks
        self.shortcuts = shortcuts
        self.tileDir = tileDir
        self.tileExtract = tileExtract
        self.timezone = timezone
        self.trafficExtract = trafficExtract
        self.transitDir = transitDir
        self.transitFeedsDir = transitFeedsDir
        self.useLruMemCache = useLruMemCache
        self.useSimpleMemCache = useSimpleMemCache
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case admin
        case dataProcessing = "data_processing"
        case globalSynchronizedCache = "global_synchronized_cache"
        case hierarchy
        case idTableSize = "id_table_size"
        case importBikeShareStations = "import_bike_share_stations"
        case includeBicycle = "include_bicycle"
        case includeConstruction = "include_construction"
        case includeDriveways = "include_driveways"
        case includeDriving = "include_driving"
        case includePedestrian = "include_pedestrian"
        case logging
        case lruMemCacheHardControl = "lru_mem_cache_hard_control"
        case maxCacheSize = "max_cache_size"
        case maxConcurrentReaderUsers = "max_concurrent_reader_users"
        case reclassifyLinks = "reclassify_links"
        case shortcuts
        case tileDir = "tile_dir"
        case tileExtract = "tile_extract"
        case timezone
        case trafficExtract = "traffic_extract"
        case transitDir = "transit_dir"
        case transitFeedsDir = "transit_feeds_dir"
        case useLruMemCache = "use_lru_mem_cache"
        case useSimpleMemCache = "use_simple_mem_cache"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(admin, forKey: .admin)
        try container.encodeIfPresent(dataProcessing, forKey: .dataProcessing)
        try container.encodeIfPresent(globalSynchronizedCache, forKey: .globalSynchronizedCache)
        try container.encodeIfPresent(hierarchy, forKey: .hierarchy)
        try container.encodeIfPresent(idTableSize, forKey: .idTableSize)
        try container.encodeIfPresent(importBikeShareStations, forKey: .importBikeShareStations)
        try container.encodeIfPresent(includeBicycle, forKey: .includeBicycle)
        try container.encodeIfPresent(includeConstruction, forKey: .includeConstruction)
        try container.encodeIfPresent(includeDriveways, forKey: .includeDriveways)
        try container.encodeIfPresent(includeDriving, forKey: .includeDriving)
        try container.encodeIfPresent(includePedestrian, forKey: .includePedestrian)
        try container.encodeIfPresent(logging, forKey: .logging)
        try container.encodeIfPresent(lruMemCacheHardControl, forKey: .lruMemCacheHardControl)
        try container.encodeIfPresent(maxCacheSize, forKey: .maxCacheSize)
        try container.encodeIfPresent(maxConcurrentReaderUsers, forKey: .maxConcurrentReaderUsers)
        try container.encodeIfPresent(reclassifyLinks, forKey: .reclassifyLinks)
        try container.encodeIfPresent(shortcuts, forKey: .shortcuts)
        try container.encodeIfPresent(tileDir, forKey: .tileDir)
        try container.encodeIfPresent(tileExtract, forKey: .tileExtract)
        try container.encodeIfPresent(timezone, forKey: .timezone)
        try container.encodeIfPresent(trafficExtract, forKey: .trafficExtract)
        try container.encodeIfPresent(transitDir, forKey: .transitDir)
        try container.encodeIfPresent(transitFeedsDir, forKey: .transitFeedsDir)
        try container.encodeIfPresent(useLruMemCache, forKey: .useLruMemCache)
        try container.encodeIfPresent(useSimpleMemCache, forKey: .useSimpleMemCache)
    }
}
