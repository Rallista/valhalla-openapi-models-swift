//
// ServiceLimits.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct ServiceLimits: Codable, JSONEncodable, Hashable {
    public var auto: ServiceLimitsAuto?
    public var bicycle: ServiceLimitsBicycle?
    public var bikeshare: ServiceLimitsBicycle?
    public var bus: ServiceLimitsBus?
    public var centroid: ServiceLimitsCentroid?
    public var isochrone: ServiceLimitsIsochrone?
    public var maxAlternates: Int? = 2
    public var maxExcludeLocations: Int? = 50
    public var maxExcludePolygonsLength: Int? = 10000
    public var maxRadius: Int? = 200
    public var maxReachability: Int? = 100
    public var maxTimedepDistance: Int? = 500_000
    public var maxTimedepDistanceMatrix: Int? = 0
    public var motorScooter: ServiceLimitsBicycle?
    public var motorcycle: ServiceLimitsBicycle?
    public var multimodal: ServiceLimitsMultimodal?
    public var pedestrian: ServiceLimitsPedestrian?
    public var skadi: ServiceLimitsSkadi?
    public var status: ServiceLimitsStatus?
    public var taxi: ServiceLimitsAuto?
    public var trace: ServiceLimitsTrace?
    public var transit: ServiceLimitsBicycle?
    public var truck: ServiceLimitsAuto?

    public init(auto: ServiceLimitsAuto? = nil, bicycle: ServiceLimitsBicycle? = nil, bikeshare: ServiceLimitsBicycle? = nil, bus: ServiceLimitsBus? = nil, centroid: ServiceLimitsCentroid? = nil, isochrone: ServiceLimitsIsochrone? = nil, maxAlternates: Int? = 2, maxExcludeLocations: Int? = 50, maxExcludePolygonsLength: Int? = 10000, maxRadius: Int? = 200, maxReachability: Int? = 100, maxTimedepDistance: Int? = 500_000, maxTimedepDistanceMatrix: Int? = 0, motorScooter: ServiceLimitsBicycle? = nil, motorcycle: ServiceLimitsBicycle? = nil, multimodal: ServiceLimitsMultimodal? = nil, pedestrian: ServiceLimitsPedestrian? = nil, skadi: ServiceLimitsSkadi? = nil, status: ServiceLimitsStatus? = nil, taxi: ServiceLimitsAuto? = nil, trace: ServiceLimitsTrace? = nil, transit: ServiceLimitsBicycle? = nil, truck: ServiceLimitsAuto? = nil) {
        self.auto = auto
        self.bicycle = bicycle
        self.bikeshare = bikeshare
        self.bus = bus
        self.centroid = centroid
        self.isochrone = isochrone
        self.maxAlternates = maxAlternates
        self.maxExcludeLocations = maxExcludeLocations
        self.maxExcludePolygonsLength = maxExcludePolygonsLength
        self.maxRadius = maxRadius
        self.maxReachability = maxReachability
        self.maxTimedepDistance = maxTimedepDistance
        self.maxTimedepDistanceMatrix = maxTimedepDistanceMatrix
        self.motorScooter = motorScooter
        self.motorcycle = motorcycle
        self.multimodal = multimodal
        self.pedestrian = pedestrian
        self.skadi = skadi
        self.status = status
        self.taxi = taxi
        self.trace = trace
        self.transit = transit
        self.truck = truck
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case auto
        case bicycle
        case bikeshare
        case bus
        case centroid
        case isochrone
        case maxAlternates = "max_alternates"
        case maxExcludeLocations = "max_exclude_locations"
        case maxExcludePolygonsLength = "max_exclude_polygons_length"
        case maxRadius = "max_radius"
        case maxReachability = "max_reachability"
        case maxTimedepDistance = "max_timedep_distance"
        case maxTimedepDistanceMatrix = "max_timedep_distance_matrix"
        case motorScooter = "motor_scooter"
        case motorcycle
        case multimodal
        case pedestrian
        case skadi
        case status
        case taxi
        case trace
        case transit
        case truck
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(auto, forKey: .auto)
        try container.encodeIfPresent(bicycle, forKey: .bicycle)
        try container.encodeIfPresent(bikeshare, forKey: .bikeshare)
        try container.encodeIfPresent(bus, forKey: .bus)
        try container.encodeIfPresent(centroid, forKey: .centroid)
        try container.encodeIfPresent(isochrone, forKey: .isochrone)
        try container.encodeIfPresent(maxAlternates, forKey: .maxAlternates)
        try container.encodeIfPresent(maxExcludeLocations, forKey: .maxExcludeLocations)
        try container.encodeIfPresent(maxExcludePolygonsLength, forKey: .maxExcludePolygonsLength)
        try container.encodeIfPresent(maxRadius, forKey: .maxRadius)
        try container.encodeIfPresent(maxReachability, forKey: .maxReachability)
        try container.encodeIfPresent(maxTimedepDistance, forKey: .maxTimedepDistance)
        try container.encodeIfPresent(maxTimedepDistanceMatrix, forKey: .maxTimedepDistanceMatrix)
        try container.encodeIfPresent(motorScooter, forKey: .motorScooter)
        try container.encodeIfPresent(motorcycle, forKey: .motorcycle)
        try container.encodeIfPresent(multimodal, forKey: .multimodal)
        try container.encodeIfPresent(pedestrian, forKey: .pedestrian)
        try container.encodeIfPresent(skadi, forKey: .skadi)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(taxi, forKey: .taxi)
        try container.encodeIfPresent(trace, forKey: .trace)
        try container.encodeIfPresent(transit, forKey: .transit)
        try container.encodeIfPresent(truck, forKey: .truck)
    }
}
