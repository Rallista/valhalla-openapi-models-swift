//
// LokiServiceDefaults.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct LokiServiceDefaults: Codable, JSONEncodable, Hashable {
    public var headingTolerance: Int? = 60
    public var minimumReachability: Int? = 50
    public var nodeSnapTolerance: Int? = 5
    public var radius: Int? = 0
    public var searchCutoff: Int? = 35000
    public var streetSideMaxDistance: Int? = 1000
    public var streetSideTolerance: Int? = 5

    public init(headingTolerance: Int? = 60, minimumReachability: Int? = 50, nodeSnapTolerance: Int? = 5, radius: Int? = 0, searchCutoff: Int? = 35000, streetSideMaxDistance: Int? = 1000, streetSideTolerance: Int? = 5) {
        self.headingTolerance = headingTolerance
        self.minimumReachability = minimumReachability
        self.nodeSnapTolerance = nodeSnapTolerance
        self.radius = radius
        self.searchCutoff = searchCutoff
        self.streetSideMaxDistance = streetSideMaxDistance
        self.streetSideTolerance = streetSideTolerance
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case headingTolerance = "heading_tolerance"
        case minimumReachability = "minimum_reachability"
        case nodeSnapTolerance = "node_snap_tolerance"
        case radius
        case searchCutoff = "search_cutoff"
        case streetSideMaxDistance = "street_side_max_distance"
        case streetSideTolerance = "street_side_tolerance"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(headingTolerance, forKey: .headingTolerance)
        try container.encodeIfPresent(minimumReachability, forKey: .minimumReachability)
        try container.encodeIfPresent(nodeSnapTolerance, forKey: .nodeSnapTolerance)
        try container.encodeIfPresent(radius, forKey: .radius)
        try container.encodeIfPresent(searchCutoff, forKey: .searchCutoff)
        try container.encodeIfPresent(streetSideMaxDistance, forKey: .streetSideMaxDistance)
        try container.encodeIfPresent(streetSideTolerance, forKey: .streetSideTolerance)
    }
}
