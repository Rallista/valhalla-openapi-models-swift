//
// MeiliDefault.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct MeiliDefault: Codable, JSONEncodable, Hashable {
    public var beta: Int? = 3
    public var breakageDistance: Int? = 2000
    public var geometry: Bool? = false
    public var gpsAccuracy: Int? = 5
    public var interpolationDistance: Int? = 10
    public var maxRouteDistanceFactor: Int? = 5
    public var maxRouteTimeFactor: Int? = 5
    public var maxSearchRadius: Int? = 100
    public var route: Bool? = true
    public var searchRadius: Int? = 50
    public var sigmaZ: Double? = 4.07
    public var turnPenaltyFactor: Int? = 0

    public init(beta: Int? = 3, breakageDistance: Int? = 2000, geometry: Bool? = false, gpsAccuracy: Int? = 5, interpolationDistance: Int? = 10, maxRouteDistanceFactor: Int? = 5, maxRouteTimeFactor: Int? = 5, maxSearchRadius: Int? = 100, route: Bool? = true, searchRadius: Int? = 50, sigmaZ: Double? = 4.07, turnPenaltyFactor: Int? = 0) {
        self.beta = beta
        self.breakageDistance = breakageDistance
        self.geometry = geometry
        self.gpsAccuracy = gpsAccuracy
        self.interpolationDistance = interpolationDistance
        self.maxRouteDistanceFactor = maxRouteDistanceFactor
        self.maxRouteTimeFactor = maxRouteTimeFactor
        self.maxSearchRadius = maxSearchRadius
        self.route = route
        self.searchRadius = searchRadius
        self.sigmaZ = sigmaZ
        self.turnPenaltyFactor = turnPenaltyFactor
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case beta
        case breakageDistance = "breakage_distance"
        case geometry
        case gpsAccuracy = "gps_accuracy"
        case interpolationDistance = "interpolation_distance"
        case maxRouteDistanceFactor = "max_route_distance_factor"
        case maxRouteTimeFactor = "max_route_time_factor"
        case maxSearchRadius = "max_search_radius"
        case route
        case searchRadius = "search_radius"
        case sigmaZ = "sigma_z"
        case turnPenaltyFactor = "turn_penalty_factor"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(beta, forKey: .beta)
        try container.encodeIfPresent(breakageDistance, forKey: .breakageDistance)
        try container.encodeIfPresent(geometry, forKey: .geometry)
        try container.encodeIfPresent(gpsAccuracy, forKey: .gpsAccuracy)
        try container.encodeIfPresent(interpolationDistance, forKey: .interpolationDistance)
        try container.encodeIfPresent(maxRouteDistanceFactor, forKey: .maxRouteDistanceFactor)
        try container.encodeIfPresent(maxRouteTimeFactor, forKey: .maxRouteTimeFactor)
        try container.encodeIfPresent(maxSearchRadius, forKey: .maxSearchRadius)
        try container.encodeIfPresent(route, forKey: .route)
        try container.encodeIfPresent(searchRadius, forKey: .searchRadius)
        try container.encodeIfPresent(sigmaZ, forKey: .sigmaZ)
        try container.encodeIfPresent(turnPenaltyFactor, forKey: .turnPenaltyFactor)
    }
}
