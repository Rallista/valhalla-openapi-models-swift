//
// DirectionsOptions.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct DirectionsOptions: Codable, JSONEncodable, Hashable {
    public enum DirectionsType: String, Codable, CaseIterable {
        case _none = "none"
        case maneuvers
        case instructions
    }

    public enum Format: String, Codable, CaseIterable {
        case json
        case gpx
        case osrm
        case pbf
    }

    public enum ShapeFormat: String, Codable, CaseIterable {
        case polyline6
        case polyline5
        case geojson
        case noShape = "no_shape"
    }

    public var units: DistanceUnit?
    public var language: ValhallaLanguages?
    /** The level of directional narrative to include. Locations and times will always be returned, but narrative generation verbosity can be controlled with this parameter. */
    public var directionsType: DirectionsType? = .instructions
    public var format: Format?
    public var shapeFormat: ShapeFormat? = .polyline6
    public var bannerInstructions: Bool?
    public var voiceInstructions: Bool?
    public var alternates: Int?

    public init(units: DistanceUnit? = nil, language: ValhallaLanguages? = nil, directionsType: DirectionsType? = .instructions, format: Format? = nil, shapeFormat: ShapeFormat? = .polyline6, bannerInstructions: Bool? = nil, voiceInstructions: Bool? = nil, alternates: Int? = nil) {
        self.units = units
        self.language = language
        self.directionsType = directionsType
        self.format = format
        self.shapeFormat = shapeFormat
        self.bannerInstructions = bannerInstructions
        self.voiceInstructions = voiceInstructions
        self.alternates = alternates
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case units
        case language
        case directionsType = "directions_type"
        case format
        case shapeFormat = "shape_format"
        case bannerInstructions = "banner_instructions"
        case voiceInstructions = "voice_instructions"
        case alternates
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(units, forKey: .units)
        try container.encodeIfPresent(language, forKey: .language)
        try container.encodeIfPresent(directionsType, forKey: .directionsType)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(shapeFormat, forKey: .shapeFormat)
        try container.encodeIfPresent(bannerInstructions, forKey: .bannerInstructions)
        try container.encodeIfPresent(voiceInstructions, forKey: .voiceInstructions)
        try container.encodeIfPresent(alternates, forKey: .alternates)
    }
}
